// Code generated by Kitex v0.3.1. DO NOT EDIT.

package bizservice

import (
	"context"
	"github.com/bytedance2022/minimal_tiktok/kitex_gen/biz"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return bizServiceServiceInfo
}

var bizServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BizService"
	handlerType := (*biz.BizService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Feed":           kitex.NewMethodInfo(feedHandler, newBizServiceFeedArgs, newBizServiceFeedResult, false),
		"PublishAction":  kitex.NewMethodInfo(publishActionHandler, newBizServicePublishActionArgs, newBizServicePublishActionResult, false),
		"PublishList":    kitex.NewMethodInfo(publishListHandler, newBizServicePublishListArgs, newBizServicePublishListResult, false),
		"FavoriteAction": kitex.NewMethodInfo(favoriteActionHandler, newBizServiceFavoriteActionArgs, newBizServiceFavoriteActionResult, false),
		"FavoriteList":   kitex.NewMethodInfo(favoriteListHandler, newBizServiceFavoriteListArgs, newBizServiceFavoriteListResult, false),
		"CommentAction":  kitex.NewMethodInfo(commentActionHandler, newBizServiceCommentActionArgs, newBizServiceCommentActionResult, false),
		"CommentList":    kitex.NewMethodInfo(commentListHandler, newBizServiceCommentListArgs, newBizServiceCommentListResult, false),
		"RelationAction": kitex.NewMethodInfo(relationActionHandler, newBizServiceRelationActionArgs, newBizServiceRelationActionResult, false),
		"FollowList":     kitex.NewMethodInfo(followListHandler, newBizServiceFollowListArgs, newBizServiceFollowListResult, false),
		"FollowerList":   kitex.NewMethodInfo(followerListHandler, newBizServiceFollowerListArgs, newBizServiceFollowerListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "biz",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.BizServiceFeedArgs)
	realResult := result.(*biz.BizServiceFeedResult)
	success, err := handler.(biz.BizService).Feed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceFeedArgs() interface{} {
	return biz.NewBizServiceFeedArgs()
}

func newBizServiceFeedResult() interface{} {
	return biz.NewBizServiceFeedResult()
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.BizServicePublishActionArgs)
	realResult := result.(*biz.BizServicePublishActionResult)
	success, err := handler.(biz.BizService).PublishAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServicePublishActionArgs() interface{} {
	return biz.NewBizServicePublishActionArgs()
}

func newBizServicePublishActionResult() interface{} {
	return biz.NewBizServicePublishActionResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.BizServicePublishListArgs)
	realResult := result.(*biz.BizServicePublishListResult)
	success, err := handler.(biz.BizService).PublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServicePublishListArgs() interface{} {
	return biz.NewBizServicePublishListArgs()
}

func newBizServicePublishListResult() interface{} {
	return biz.NewBizServicePublishListResult()
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.BizServiceFavoriteActionArgs)
	realResult := result.(*biz.BizServiceFavoriteActionResult)
	success, err := handler.(biz.BizService).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceFavoriteActionArgs() interface{} {
	return biz.NewBizServiceFavoriteActionArgs()
}

func newBizServiceFavoriteActionResult() interface{} {
	return biz.NewBizServiceFavoriteActionResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.BizServiceFavoriteListArgs)
	realResult := result.(*biz.BizServiceFavoriteListResult)
	success, err := handler.(biz.BizService).FavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceFavoriteListArgs() interface{} {
	return biz.NewBizServiceFavoriteListArgs()
}

func newBizServiceFavoriteListResult() interface{} {
	return biz.NewBizServiceFavoriteListResult()
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.BizServiceCommentActionArgs)
	realResult := result.(*biz.BizServiceCommentActionResult)
	success, err := handler.(biz.BizService).CommentAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceCommentActionArgs() interface{} {
	return biz.NewBizServiceCommentActionArgs()
}

func newBizServiceCommentActionResult() interface{} {
	return biz.NewBizServiceCommentActionResult()
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.BizServiceCommentListArgs)
	realResult := result.(*biz.BizServiceCommentListResult)
	success, err := handler.(biz.BizService).CommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceCommentListArgs() interface{} {
	return biz.NewBizServiceCommentListArgs()
}

func newBizServiceCommentListResult() interface{} {
	return biz.NewBizServiceCommentListResult()
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.BizServiceRelationActionArgs)
	realResult := result.(*biz.BizServiceRelationActionResult)
	success, err := handler.(biz.BizService).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceRelationActionArgs() interface{} {
	return biz.NewBizServiceRelationActionArgs()
}

func newBizServiceRelationActionResult() interface{} {
	return biz.NewBizServiceRelationActionResult()
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.BizServiceFollowListArgs)
	realResult := result.(*biz.BizServiceFollowListResult)
	success, err := handler.(biz.BizService).FollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceFollowListArgs() interface{} {
	return biz.NewBizServiceFollowListArgs()
}

func newBizServiceFollowListResult() interface{} {
	return biz.NewBizServiceFollowListResult()
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*biz.BizServiceFollowerListArgs)
	realResult := result.(*biz.BizServiceFollowerListResult)
	success, err := handler.(biz.BizService).FollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceFollowerListArgs() interface{} {
	return biz.NewBizServiceFollowerListArgs()
}

func newBizServiceFollowerListResult() interface{} {
	return biz.NewBizServiceFollowerListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Feed(ctx context.Context, req *biz.FeedRequest) (r *biz.FeedResponse, err error) {
	var _args biz.BizServiceFeedArgs
	_args.Req = req
	var _result biz.BizServiceFeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishAction(ctx context.Context, req *biz.PublishActionRequest) (r *biz.PublishActionResponse, err error) {
	var _args biz.BizServicePublishActionArgs
	_args.Req = req
	var _result biz.BizServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, req *biz.PublishListRequest) (r *biz.PublishListResponse, err error) {
	var _args biz.BizServicePublishListArgs
	_args.Req = req
	var _result biz.BizServicePublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteAction(ctx context.Context, req *biz.FavoriteActionRequest) (r *biz.FavoriteActionResponse, err error) {
	var _args biz.BizServiceFavoriteActionArgs
	_args.Req = req
	var _result biz.BizServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, req *biz.FavoriteListRequest) (r *biz.FavoriteListResponse, err error) {
	var _args biz.BizServiceFavoriteListArgs
	_args.Req = req
	var _result biz.BizServiceFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, req *biz.CommentActionRequest) (r *biz.CommentActionResponse, err error) {
	var _args biz.BizServiceCommentActionArgs
	_args.Req = req
	var _result biz.BizServiceCommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, req *biz.CommentListRequest) (r *biz.CommentListResponse, err error) {
	var _args biz.BizServiceCommentListArgs
	_args.Req = req
	var _result biz.BizServiceCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationAction(ctx context.Context, req *biz.RelationActionRequest) (r *biz.RelationActionResponse, err error) {
	var _args biz.BizServiceRelationActionArgs
	_args.Req = req
	var _result biz.BizServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, req *biz.FollowListRequest) (r *biz.FollowListResponse, err error) {
	var _args biz.BizServiceFollowListArgs
	_args.Req = req
	var _result biz.BizServiceFollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, req *biz.FollowerListRequest) (r *biz.FollowerListResponse, err error) {
	var _args biz.BizServiceFollowerListArgs
	_args.Req = req
	var _result biz.BizServiceFollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
