// Code generated by Kitex v0.3.1. DO NOT EDIT.

package bizservice

import (
	"context"
	"github.com/bytedance2022/minimal_tiktok/kitex_gen/biz"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Feed(ctx context.Context, req *biz.FeedRequest, callOptions ...callopt.Option) (r *biz.FeedResponse, err error)
	PublishAction(ctx context.Context, req *biz.PublishActionRequest, callOptions ...callopt.Option) (r *biz.PublishActionResponse, err error)
	PublishList(ctx context.Context, req *biz.PublishListRequest, callOptions ...callopt.Option) (r *biz.PublishListResponse, err error)
	FavoriteAction(ctx context.Context, req *biz.FavoriteActionRequest, callOptions ...callopt.Option) (r *biz.FavoriteActionResponse, err error)
	FavoriteList(ctx context.Context, req *biz.FavoriteListRequest, callOptions ...callopt.Option) (r *biz.FavoriteListResponse, err error)
	CommentAction(ctx context.Context, req *biz.CommentActionRequest, callOptions ...callopt.Option) (r *biz.CommentActionResponse, err error)
	CommentList(ctx context.Context, req *biz.CommentListRequest, callOptions ...callopt.Option) (r *biz.CommentListResponse, err error)
	RelationAction(ctx context.Context, req *biz.RelationActionRequest, callOptions ...callopt.Option) (r *biz.RelationActionResponse, err error)
	FollowList(ctx context.Context, req *biz.FollowListRequest, callOptions ...callopt.Option) (r *biz.FollowListResponse, err error)
	FollowerList(ctx context.Context, req *biz.FollowerListRequest, callOptions ...callopt.Option) (r *biz.FollowerListResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kBizServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kBizServiceClient struct {
	*kClient
}

func (p *kBizServiceClient) Feed(ctx context.Context, req *biz.FeedRequest, callOptions ...callopt.Option) (r *biz.FeedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Feed(ctx, req)
}

func (p *kBizServiceClient) PublishAction(ctx context.Context, req *biz.PublishActionRequest, callOptions ...callopt.Option) (r *biz.PublishActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishAction(ctx, req)
}

func (p *kBizServiceClient) PublishList(ctx context.Context, req *biz.PublishListRequest, callOptions ...callopt.Option) (r *biz.PublishListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishList(ctx, req)
}

func (p *kBizServiceClient) FavoriteAction(ctx context.Context, req *biz.FavoriteActionRequest, callOptions ...callopt.Option) (r *biz.FavoriteActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteAction(ctx, req)
}

func (p *kBizServiceClient) FavoriteList(ctx context.Context, req *biz.FavoriteListRequest, callOptions ...callopt.Option) (r *biz.FavoriteListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteList(ctx, req)
}

func (p *kBizServiceClient) CommentAction(ctx context.Context, req *biz.CommentActionRequest, callOptions ...callopt.Option) (r *biz.CommentActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentAction(ctx, req)
}

func (p *kBizServiceClient) CommentList(ctx context.Context, req *biz.CommentListRequest, callOptions ...callopt.Option) (r *biz.CommentListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentList(ctx, req)
}

func (p *kBizServiceClient) RelationAction(ctx context.Context, req *biz.RelationActionRequest, callOptions ...callopt.Option) (r *biz.RelationActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RelationAction(ctx, req)
}

func (p *kBizServiceClient) FollowList(ctx context.Context, req *biz.FollowListRequest, callOptions ...callopt.Option) (r *biz.FollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowList(ctx, req)
}

func (p *kBizServiceClient) FollowerList(ctx context.Context, req *biz.FollowerListRequest, callOptions ...callopt.Option) (r *biz.FollowerListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowerList(ctx, req)
}
